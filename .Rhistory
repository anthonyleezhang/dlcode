theme(text = element_text(size = 40))
my_theme = theme_set(theme_classic())
my_theme = theme_update(
text = element_text(size = 40)
)
ggplot(data, aes(x = x, y = y)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
theme(text = element_text(size = 40))
rm(list = ls())
my_theme = theme(text = element_text(size = 40))
data = data.table(x = 1:10, y = (1:10)^2)
ggplot(data, aes(x = x, y = y)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
theme(text = element_text(size = 40))
ggplot(data, aes(x = x, y = y)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
my_theme
?theme
?element_line
alz_theme = theme(
text = element_text(size = 40),
line = element_line(size = 1.3)
)
data = data.table(x = 1:10, y = (1:10)^2)
ggplot(data, aes(x = x, y = y)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
alz_theme
ggplot(data, aes(x = x, y = y)) +
geom_line(size = 1.3) +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
alz_theme
?theme
ggplot(data, aes(x = x, y = y)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
theme(line = element_line(size = 2))
ggplot(data, aes(x = x, y = y)) +
geom_line() +
geom_point() +
scale_x_continuous(name = "a") +
scale_y_continuous(name = "Lagrange Multipliers") +
labs(title = "Lagrange Multipliers") +
theme(line = element_line(size = 5))
?theme
tax_data = data.table(tau = numeric(0), v = numeric(0), monopoly_price = numeric(0),
seller_opt_val = numeric(0), EV_buyer = numeric(0), alloc_welfare = numeric(0))
for(tau_try in 0:tau_res / tau_res) {
print(paste("TAX TRY:", tau_try))
data_s[, tau := tau_try]
for(i in 1:(dim(data_s)[1])){
data_s[i, monopoly_price := best_price(v, demand = calibration_demand, tau = tau_try, highest_price = 500)]
}
data_s[, seller_opt_val :=
v * (1-calibration_demand(monopoly_price)) +
monopoly_price * calibration_demand(monopoly_price) -
tau_try * monopoly_price]
data_s[, buyer_v := monopoly_price + integrate(calibration_demand, lower = monopoly_price, upper = Inf)$value
/ calibration_demand(monopoly_price)]
data_s[, alloc_welfare := v * (1-calibration_demand(monopoly_price)) + buyer_v * calibration_demand(monopoly_price)]
tax_data = rbindlist(list(tax_data, data_s[, .(tau, v, monopoly_price, seller_opt_val, buyer_v, alloc_welfare)]))
}
tax_data[, investment_welfare := investment_value_function(tau)]
tax_data[, total_welfare := alloc_welfare + investment_welfare]
library(evd)
?pgumbel
z = 0:1000/1000
diffp = diff(c(0, p))
p = v
diffp = diff(c(0, p))
v = 0:1000/1000
p = v
diffp = diff(c(0, p))
pvec = v
diffp = diff(c(0, pvec))
diffp = diff(c(0, pvec))
tvec
tvec = cumsum(diffp * vvec)
vvec = 0:1000/1000
pvec = v
diffp = diff(c(0, pvec))
vvec = 0:1000/1000
pvec = vvec
diffp = diff(c(0, pvec))
tvec = cumsum(diffp * vvec)
tvec
qplot(pvec, tvec)
?convolve
filter_tvec = filter(tvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
filter_tvec = filter(pvec,
filter_pvec = filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
filter_tvec = filter(tvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
data = data.table(pvec = pvec, tvec = tvec)
data[, filter_pvec := filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)]
data
filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
data[, filter_pvec := filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)]
data
filter_pvec := filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
filter_tvec = filter(tvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
data = data.table(pvec = pvec,
tvec = tvec
filter_pvec = filter_pvec,
filter_tvec = filter_tvec)
filter_pvec := filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
filter_tvec = filter(tvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
data = data.table(pvec = pvec,
tvec = tvec,
filter_pvec = filter_pvec,
filter_tvec = filter_tvec)
data
ggplot(data) +
geom_line(aes(x = pvec, y = tvec), color = "red") +
geom_line(aes(x = filter_pvec, y = filter_tvec), color = "blue")
data[50:100]
filter_pvec = filter(pvec,
filter = rep(1/50, 50),
method = "convolution",
sides = 2,
circular = FALSE)
filter_tvec = filter(tvec,
filter = rep(1/100, 100),
method = "convolution",
sides = 2,
circular = FALSE)
data = data.table(pvec = pvec,
tvec = tvec,
filter_pvec = filter_pvec,
filter_tvec = filter_tvec)
ggplot(data) +
geom_line(aes(x = pvec, y = tvec), color = "red") +
geom_line(aes(x = filter_pvec, y = filter_tvec), color = "blue")
filter_pvec = filter(pvec,
filter = rep(1/400, 400),
method = "convolution",
sides = 2,
circular = FALSE)
filter_tvec = filter(tvec,
filter = rep(1/400, 400),
method = "convolution",
sides = 2,
circular = FALSE)
data = data.table(pvec = pvec,
tvec = tvec,
filter_pvec = filter_pvec,
filter_tvec = filter_tvec)
ggplot(data) +
geom_line(aes(x = pvec, y = tvec), color = "red") +
geom_line(aes(x = filter_pvec, y = filter_tvec), color = "blue")
ggplot(data) +
geom_line(aes(x = pvec, y = tvec), color = "red", size = 1.3) +
geom_line(aes(x = filter_pvec, y = filter_tvec), color = "blue", size = 1.3)
msft_income = 51078.45
stanford_income = 29486
total_income = msft_income + stanford_income
total_income
total_income = msft_income + stanford_income + total_dividends
total_dividends = 678
qualified_dividends = 528
total_income = msft_income + stanford_income + total_dividends
total_income
60105+226+413
standard_deduction = 6300
standard_deduction_total = total_income - standard_deduction
standard_deduction_total
standard_deduction_total
taxable_income = standard_deduction_total - exemptions
exemptions = 4000
taxable_income = standard_deduction_total - exemptions
taxable_income
msft_withheld = 8160
stanford_withheld = 3568
withheld = msft_withheld + stanford_withheld
withheld
tax - withheld
tax = 13525
amount_owed = tax - withheld
amount_owed
81242-4044
4656-109
4547-2488
51078/81242
4547*0.6287
29486+51078+678
81242-74942
74942-4000
8160+3568
13525-11728
msft_income = 51078.45
stanford_income = 29486
wage_income = msft_income + stanford_income
wage_income
total_dividends = 678
qualified_dividends = 528
total_income = msft_income + stanford_income + total_dividends
total_income
standard_deduction = 6300
standard_deduction_total = total_income - standard_deduction
standard_deduction_total
exemptions = 4000
taxable_income = standard_deduction_total - exemptions
taxable_income
msft_withheld = 8160
stanford_withheld = 3568
withheld = msft_withheld + stanford_withheld
withheld
amount_owed = tax - withheld
amount_owed
tax = 13525
msft_withheld = 8160
stanford_withheld = 3568
withheld = msft_withheld + stanford_withheld
withheld
amount_owed = tax - withheld
amount_owed
51078/81242
4400*0.6287
51078-2766
48312*0.0515
81242-4044
4656-109
4547-2488
rm(list = ls())
load("../../data/clean/2013_data.RData")
14+3.69+2+1.79+2.6+2.5+3.6+1.5+1.6+2.2+3+3
ranks = c(17, 45, 59, 68, 86, 96, 117, 138, 157, 181, 206, 240, 283, 307, 346, 431, 446, 539, 472)
data = data.table(wins = wins)
wins = c(17, 45, 59, 68, 86, 96, 117, 138, 157, 181, 206, 240, 283, 307, 346, 431, 446, 539, 472)
data = data.table(wins = wins)
data[, rank := 1:.N]
geom_line()
ggplot(data, aes(x = rank, y = wins)) +
geom_line()
ggplot(data, aes(x = rank, y = wins)) +
geom_line(size = 1.3) +
scale_y_continuous(limits = c(0, 600))
setwd("~/Dropbox/projects/ownership/dynamic_calibration")
33.42+35+30.41
0.8/3
5200/0.75
4400/0.6
data(ozone2)
install.packages("fields")
data(ozone2)
library(fields)
data(ozone2)
ozone2
str(ozone2)
library(fields)
data("ozone2")
long.lat <- ozone2$lon.lat
long <- long.lat[,1]
lat <- long.lat[,2]
stat_measure <- ozone2$y['870618',]
x = long
y = lat
stat_measure
h = stat_measure
x
y
h
l <- numeric(length(long))
k = 1
tmp1  = x - long
tmp2  = y - lat
tmp1
tmp2
long
lat
data = data.table(x = long, y = lat, h = stat_measure)
data
data
data[, mean(x)]
data[, mean(y)]
xin = 87
yin = 40
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
data
data[is.na(h), h := 84]
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
val = data[, sum(w*h)/sum(w)]
return(val)
val
h = 1
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
val = data[, sum(w*z)/sum(w)]
data = data.table(x = long, y = lat, z = stat_measure)
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
val = data[, sum(w*z)/sum(w)]
val
data
data[is.na(z), z := 81]
data[, sd(x)]
data[, sd(y)]
h = 2
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
val = data[, sum(w*z)/sum(w)]
val
data
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data
xin
xin
xin = -87
yin
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
val = data[, sum(w*z)/sum(w)]
val
data = data.table(x = long, y = lat, z = stat_measure)
data[is.na(z), z := 80]
xin = -87
yin = 40
h = 2
data[, w1 := exp(-(xin-x)^2/(2*h^2))]
data[, w2 := exp(-(yin-y)^2/(2*h^2))]
data[, w := w1 * w2]
val = data[, sum(w*z)/sum(w)]
val
asdf = runif(100000)
xmin = 1
alpha = 1
sample = xmin / (1-U)^(1/alpha)
asdf = runif(100000)
xmin = 1
alpha = 1
sample = xmin / (1-asdf)^(1/alpha)
sample
plot(density(sample))
sample
plot(density(log(sample)))
sample = xmin / ( (1-asdf)^(1/alpha) )
plot(density(log(sample)))
asdf = runif(100000)
xmin = 1
alpha = 2
sample = xmin / ( (1-asdf)^(1/alpha) )
plot(density(log(sample)))
1/13
asdf = density(rnorm(1000))
asdf
str(asdf)
x = asdf$x
y = asdf$y
plot(x,y)
0.25 * 37 + 0.65 * 4
0.35 * 37 + 0.65 * 4
0.25 * 36 + 0.65 * 4
0.35 * 36 + 0.65 * 4
dnorm
?dlnorm
integrate(x * dlnorm(x), 0.00001, Infinity)
integrate(function(x) {x * dlnorm(x)}, 0.00001, Infinity)
integrate(function(x) {x * dlnorm(x)}, 0.00001, Inf)
integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, 0.00001, Inf)
sdlog = 0.2
integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, 0.00001, Inf)
pct99 = qlnorm(0.99, meanlog = 0, sdlog = sdlog)
tailweight = integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, pct99, Inf)
mean = integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, 0.00001, Inf)
tailweight
mean
sdlog = 1
pct99 = qlnorm(0.99, meanlog = 0, sdlog = sdlog)
tailweight = integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, pct99, Inf)
mean = integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, 0.00001, Inf)
tailweight / mean
tailweight
mean
tailweight
str(tailweightr)
str(tailweight)
tailfrac = function(sdlog) {
pct99 = qlnorm(0.99, meanlog = 0, sdlog = sdlog)
tailweight = integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, pct99, Inf)
mean = integrate(function(x) {x * dlnorm(x, meanlog = 0, sdlog = sdlog)}, 0.00001, Inf)
return(tailweight$value / mean$value)
}
data = data.table(sdlog = c(1:200/100))
data = data.table(sdlog = c(1:200/100))
for(i in 1:length(data$sdlog)) {
data[i, tailfrac := tailfrac(sdlog)]
}
data
data
ggplot(data, aes(x = sdlog, y = tailfrac)) + geom_line(size = 1.3)
ggplot(data, aes(x = sdlog, y = tailfrac)) +
geom_line(size = 1.3) +
scale_y_continuous(limits = c(0,1))
?format
X = runif(10000)
Y = runif(10000)
mean(X-Y)
X
Y
X-Y
mean(abs(X-Y))
X = 0:1000/1000
Y = (X^2) + (1-X)^2
plot(X,Y)
20*0.04+10*0.02
400/2.7
# Get optimal tax, welfare numbers for varying sdmean moment
setwd("C:/Users/Anthony Lee Zhang/Dropbox/projects/ownership/calibration")
##############
rm(list = ls())
source("sensitivity/sensitivity_functions.R")
load("results/sensitivity/moments_sensitivity_grid_sdmean.RData")
invfrac = 0.4
for(i in 1:dim(sdmean_data)[1]) {
print(i)
logsd = sdmean_data[i, logsd]
decay_rate = sdmean_data[i, decayrate]
paramvec = c(logsd, decay_rate)
invval_func = make_investment_function(paramvec, invfrac)
sdmean_data[i, base_awelfare := get_alloc_welfare(0, paramvec)]
sdmean_data[i, base_twelfare := base_awelfare + invval_func(0)]
sdmean_data[i, base_assetprice := get_base_asset_price(paramvec = paramvec, inv_frac = invfrac)]
alloc_out = optimize(function(tau_try) {return(get_alloc_welfare(tau_try, paramvec = paramvec))},
interval = c(0, 1), tol = 0.001, maximum = TRUE)
sdmean_data[i, alloc_tau := alloc_out$maximum]
sdmean_data[i, alloc_tau_awelfare := alloc_out$objective]
total_out = optimize(function(tau_try) {return(get_total_welfare(tau_try, paramvec = paramvec, invval_func = invval_func))},
interval = c(0, 1), tol = 0.001, maximum = TRUE)
sdmean_data[i, total_tau := total_out$maximum]
sdmean_data[i, total_tau_twelfare := total_out$objective]
sdmean_data[i, total_tau_awelfare := get_alloc_welfare(total_out$maximum, paramvec = paramvec)]
}
save(sdmean_data, file = "results/sensitivity/sdmean_sensitivity.RData")
write.csv(sdmean_data, file = "results/sensitivity/sdmean_sensitivity.csv")
qplot(sdmean_data$sdmean, sdmean_data$alloc_tau)
qplot(sdmean_data$sdmean, sdmean_data$total_tau)
sdmean_data[, alloc_pct_gain := alloc_tau_awelfare / base_awelfare - 1]
qplot(sdmean_data$sdmean, sdmean_data$alloc_pct_gain)
delta = 0.95
sdmean_data[, total_pct_gain := (total_tau_twelfare - base_twelfare) / base_assetprice]
qplot(sdmean_data$sdmean, sdmean_data$total_pct_gain)
